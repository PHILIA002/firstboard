CGI (Common Gateway Interface)
    요청이 올 때마다 새로운 프로세스를 생성하는 방식 (외부 프로그램 통제)

1997년 Servlet 등장 자바로 HTTP(Hyper Text Transfer Protocol) 요청을 처리
    프로그램 하나만 켜두고 요청이 오면 스레드만 새로 생성해서 처리
    ex) out.print("<p>안녕하세요</p>")

2000~ JSP (Java Server Pages) 등장
    HTML 기반 파일에 <% 자바코드 %>
    HTML은 디자이너, 자바로직은 개발자가 작성
    동적 데이터 바인딩 가능
    여전히 프론트엔드와 백엔드의 소통이 어려움
    ex) <p>안녕하세요<%=request.getParameter("name")%>님</p>

MVC 구조 - 유지보수성 향상
    Controller 중간다리 역할
    View 화면
    Model 데이터 및 로직

    ex) 회원가입 처리 흐름
    1. 화면 UI 로직 - HTML 폼에서 이름, 전화번호, 이메일 등 입력 후 가입
    2. (주소로 받아서) Controller - 메서드 실행 Service 계층 호출
    3. Service 계층 - 비밀번호 암호화, 이메일 중복여부 확인, 이메일 형식 검증, 가입 후 메일발송
    4. DAO/Repository 계층(데이터 접근) - DB에 연결하여 INSERT 쿼리 실행

Spring : 자바 웹 개발을 쉽게 도와주는 프레임워크
    - 의존성 주입(DI) - 객체를 알아서 만들어주고 적절한 타이밍에 주입
    - 제어의 역전(IoC) - 내가 알아서 다 관리하겠다
    - 관점지향 프로그래밍 - 여러 파트로 나누겠다

Spring Boot : 스프링 사용을 쉽게 해주는 기능

한편, (DB쪽) JDBC
    ex) String sql = "INSERT INTO employee (name, age) VALUES (?, ?)";

JPA - SQL 작성 없이 객체(Entity) 중심 개발
    CRUD 기능을 기본적으로 제공

자바 - 객체 지향 언어
    클래스, 상속(추상메서드 오버라이딩), 다형성, 추상클래스/인터페이스 + 익명클래스

의존성(dependency) - ex) Car 객체가 Engine 객체를 사용하는 경우, Car는 Engine에 의존

==================================================================

JDBC - 콘솔기반(뷰x) 회원 관리 프로그램 (CRUD 기능) mySQL 연결 - maven
* JDBC : Java Database Connectivity 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API
* CRUD : Create Read Update Delete 데이터 조작의 기본 4가지 기능

maven - JAVA 기반 프로젝트의 라이프사이클 관리를 위한 빌드 도구 (gradle)
    이에 따라 컴파일과 빌드를 동시에 수행, 테스트를 병행하거나 서버 측 Deploy 자원을 관리할 수 있는 환경을 제공
    또한 라이브러리 관리 기능도 내포하고 있다.
    Java로 개발하다 보면 다양한 라이브러리를 필요로 하게 되는데
    pom.xml 파일에 필요한 라이브러리만 적으면 Maven이 알아서 다운받고 설치,경로까지 지정해준다. -> 의존성 관리

DAO(Data Access Object) - 실제로 DB의 데이터에 접근하는 객체
    Service와 DB를 연결, 실제로 DB에 접근하여 데이터를 삽입, 삭제, 조회, 수정 등 CRUD 기능을 수행

===================================================================

<전체 구성>

스프링 부트 - MVC - JPA - Thymeleaf(뷰, html) - REST API (비동기 처리)
render 배포 (postgresql DBeaver) - git 연결(자동배포)

스프링 이니셜라이저 (Spring Web, Thymeleaf, Spring Data JPA, Validation, Lombok, H2 Database, Spring Boot DevTools)

Article (Entity) - 데이터 맵핑 그릇, Spring data Jpa, @Entity, @Getter, @NoArgsConstructor
Repository - CRUD 기능 제공, Spring data Jpa
Service - 비즈니스 로직 (실제 CRUD 메서드 구현) @Transactional
dto - 운반 그릇, @Getter, @NoArgsConstructor
controller - 뷰로부터 요청 받는 중간 다리역할, @GetMapping, @PostMapping, @PathVariable, Model 객체
Main - Spring, Spring Boot
html - 뷰, Thymeleaf <form method="post" action="/articles">
application.yml
build.gradle - 의존성 spring data jpa, thymeleaf, validation, web, lombok, h2 ...

===================================================================

<전체 흐름 예시>

MVC 패턴
(화면)    (중개)      (로직)   (데이터 처리)[Database]
view - controller - service - repository (entity) - service - controller - view
중간에 dto가 전달

SSR(Server Side Rendering) - CRUD 기능 구현 완료
REST api 방식으로 CUD 기능 전환 (JavaScript)
form 로그인 (Spring Security)
접근 제한 로직 구현 & html 수정
구글 아이디 추가
배포 & 디자인

============================

회원가입

UserRepository repoBean = new JpaUserRepository();
PasswordEncoder encoderBean = new BCryptPasswordEncoder();
UserService serviceBean = new UserService(repoBean, encoderBean);
AuthViewController authBean = new AuthViewController(serviceBean);
authBean.join();

/join > 회원가입 > 로그인 > 글 목록 > 새 글
    > 글 작성 > 글 목록 > 글 상세 > 수정

뷰에서 요청을 보내면 컨트롤러가 받아서 Request(운반책) 객체를 생성
서비스에서 객체를 받아 메서드를 실행
로그인은 Spring이 해줌 (SecurityConfig - formLogin)
뷰에서 객체를 맵핑 [에러 발생 시 뷰로 리턴]

============================

CRUD
CUD - 비동기 처리로 업그레이드

로그인/회원가입 (폼)
비회원&타회원이 조작 금지
화면 정리
구글 로그인 추가

배포
디자인하기